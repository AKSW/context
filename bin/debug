#!/usr/bin/env node

// imports
var context = require('../app'),
    fs = require('fs'),
    colors = require('colors'),
    argv = require('optimist').argv,
    portfinder = require('portfinder'),
    watchify = require('watchify'),
    nodemon = require('nodemon'),

    // app vars
    port = argv.p,
    host = argv.a || '0.0.0.0',
    log = console.log, //(argv.s || argv.silent) ? function () {} :
    listen = function(port) {
        // start watchify
        var scripts = watchify();
        scripts.add('./public/js/app.js');
        scripts.transform('debowerify');
        scripts.transform('deamdify');
        var rebundle = function (ids) {
            log('[', new Date(), ']', 'Watchify has rebuild scripts:\n', ids);
            return scripts.bundle().pipe(fs.createWriteStream('./public/js/app.min.js'));
        };
        // listen for events
        scripts.on('update', rebundle);
        // bundle first time
        rebundle();

        // start nodemon
        nodemon({script: './app.js'});
        // listen for events
        nodemon.on('start', function () {
            log('Starting up context, serving '.yellow + host.cyan + ' on port: '.yellow + port.toString().cyan);
            log('Hit CTRL-C to stop the server');
        }).on('quit', function () {
            log('App has quit');
        }).on('restart', function (files) {
            log('App restarted due to: ', files);
        });
    };

if (argv.h || argv.help) {
    console.log([
        'usage: http-server [path] [options]',
        '',
        'options:',
        '  -p                 Port to use [8080]',
        '  -a                 Address to use [0.0.0.0]',
        '  -h --help          Print this list and exit.',
    ].join('\n'));
    process.exit();
}

if (!argv.p) {
    portfinder.basePort = 8080;
    portfinder.getPort(function (err, port) {
        if (err) {
            throw err;
        }
        listen(port);
    });
} else {
    listen(port);
}
