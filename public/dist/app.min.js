(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = function applyControllers (app) {
    app.controller('HomeController', ['$scope', require('./controllers/home.js')]);
    app.controller('RegisterController', ['$scope', require('./controllers/register.js')]);
    app.controller('ProfileController', ['$scope', require('./controllers/profile.js')]);
    app.controller('CreateCorpusController', ['$scope', require('./controllers/createcorpus.js')]);
};
},{"./controllers/createcorpus.js":5,"./controllers/home.js":6,"./controllers/profile.js":7,"./controllers/register.js":8}],2:[function(require,module,exports){
// includes
var FacetsProcesser = require('../../modules/FacetsProcesser');

// data
var facetsData;
var types, entities, articles;

module.exports = function CorpusFacetsController($scope, $state, $sce) {
    // init empty facet filters
    $scope.typeFilter = undefined;
    $scope.entityFilter = undefined;
    $scope.articleFilter = undefined;

    $scope.setFilter = function(item) {
        switch(item.type) {
            case 'article':
                if($scope.articleFilter === item.id) {
                    $scope.articleFilter = undefined;
                } else {
                    $scope.articleFilter = item.id;
                }
                break;
            case 'entity':
                if($scope.entityFilter === item.id) {
                    $scope.entityFilter = undefined;
                } else {
                    $scope.entityFilter = item.id;
                }
                break;
            case 'type':
                if($scope.typeFilter === item.id) {
                    $scope.typeFilter = undefined;
                } else {
                    $scope.typeFilter = item.id;
                }
                break;
        }
    };

    $scope.itemActive = function(item) {
        switch(item.type) {
            case 'article':
                return $scope.articleFilter === item.id;
            case 'entity':
                return $scope.entityFilter === item.id;
            case 'type':
                return $scope.typeFilter === item.id;
        }
    };

    $scope.facetFilter = function (item) {
        var filterArticle = false;
        var filterEntity = false;
        var filterType = false;

        switch(item.type) {
            case 'article':
                if($scope.entityFilter !== undefined) {
                    filterEntity = item.entities.indexOf($scope.entityFilter) !== -1;
                } else {
                    filterEntity = true;
                }
                if($scope.typeFilter !== undefined) {
                    filterType = item.types.indexOf($scope.typeFilter) !== -1;
                } else {
                    filterType = true;
                }
                return filterEntity && filterType;
            case 'entity':
                if($scope.articleFilter !== undefined) {
                    filterArticle = item.articles.indexOf($scope.articleFilter) !== -1;
                } else {
                    filterArticle = true;
                }
                if($scope.typeFilter !== undefined) {
                    filterType = item.types.indexOf($scope.typeFilter) !== -1;
                } else {
                    filterType = true;
                }
                return filterArticle && filterType;
            case 'type':
                if($scope.articleFilter !== undefined) {
                    filterArticle = item.articles.indexOf($scope.articleFilter) !== -1;
                } else {
                    filterArticle = true;
                }
                if($scope.entityFilter !== undefined) {
                    filterEntity = item.entities.indexOf($scope.entityFilter) !== -1;
                } else {
                    filterEntity = true;
                }
                return filterArticle && filterEntity;
        }
    };

    // get data
    $.getJSON('/api/corpus/' + $scope.currentCorpus._id + '/facets', function(data) {
        facetsData = FacetsProcesser.processData(data);

        // types
        types = facetsData.types;
        // entities
        entities = facetsData.entities;
        // articles
        articles = facetsData.articles;
        for(var i = 0; i < articles.length; i++) {
            articles[i].sourceSafe = $sce.trustAsHtml(articles[i].source);
        }
        // update data in scope
        $scope.data = [
            {name: 'Articles', values: articles},
            {name: 'Types', values: types},
            {name: 'Entities', values: entities},
        ];

        // redraw
        $state.reload();
    });
};

},{"../../modules/FacetsProcesser":15}],3:[function(require,module,exports){
// extentions
var extentions = require('../../data/corpusextentions');

// corpus object
var currentCorpus = {
    uri: function() {
        var it = this.input_type;
        if(it === 'twitter') {
            return 'http://twitter.com/' + this.input;
        } else if(it === 'direct') {
            return '-';
        } else {
            return this.input;
        }
    }
};

module.exports = function MainCorpusController($scope, $location, $state, corpus) {
    // set current corpus data
    currentCorpus = _.extend(currentCorpus, corpus.data);
    // expose corpus to scope
    $scope.currentCorpus = currentCorpus;

    // init extentions
    $scope.extentions = extentions;
    // expose state
    $scope.$state = $state;

    // render first view if needed
    $scope.$on('$viewContentLoaded', function onRender() {
        var len = $location.path().split('/').length;
        // if page is just loaded
        if(len === 3) {
            // redirect to first subview
            $state.go('corpus.'+extentions[0].name);
        }
    });
};

},{"../../data/corpusextentions":10}],4:[function(require,module,exports){
module.exports = function CorpusOverviewController($scope, $routeParams, $location) {
    console.log('corpus overview');
};

},{}],5:[function(require,module,exports){
var corpusTypes = require('../data/corpusTypes.js');
var nlpApis = require('../data/nlpApis.js');

module.exports = function CreateCorpusController($scope) {
    // collection of corpus types
    $scope.corpusTypes = corpusTypes;
    // collection of nlp apis
    $scope.nlpApis = nlpApis;

    // current corpus
    $scope.corpusSelection = {index: 0};
    $scope.currentCorpus = $scope.corpusTypes[0];

    // input slider reference
    var $inputCount, $sliderContainer;
    // update view slider
    var updateView = function() {
        console.log('view loaded!');
        $scope.currentCorpus = $scope.corpusTypes[$scope.corpusSelection.index];
        if($scope.currentCorpus.haveItems) {
            if(!$inputCount) {
                $sliderContainer = $('#slider_container');
                $inputCount = $('#input_count');
            } else {
                $inputCount.slider('destroy');
            }
            $sliderContainer.show();
            $inputCount.slider({
                min: $scope.currentCorpus.itemsMin,
                max: $scope.currentCorpus.itemsMax,
                step: 50,
                value: $scope.currentCorpus.itemsDefault,
                tooltip: 'always'
            });
        } else {
            $sliderContainer.hide();
        }
    };

    // update view on model change
    $scope.$watch('corpusSelection', updateView, true);

    // update slider
    $scope.$on('$viewContentLoaded', updateView);

    // analysis start function
    $scope.startAnalysis = function () {
        // get fields
        var $inputItem = $('#input_item');
        var $inputItemArea = $('#input_item_area');
        var $inputItemFile = $('#input_item_file');
        var $inputCountField = $('input#input_count');
        var $newCorpusForm = $('#newcorpus_form');
        var $inputType = $('input[name=input_type]:checked');

        // remove old warning
        $inputItem.parent().removeClass('has-warning');

        // validate input
        var input = null;
        var corpusType = $scope.currentCorpus.name;
        var inputType = $scope.currentCorpus.inputType;
        switch(inputType) {
            case 'text':
                input = $inputItem.val().trim();
                break;
            case 'textarea':
                input = $inputItemArea.val().trim();
                break;
            case 'file':
                input = $inputItemFile.val();
                break;
        }

        if (!input) {
            $inputItem.parent().addClass('has-warning');
            return;
        }

        // assign count to input field
        var itemCount = $inputCount.slider('getValue');
        $inputCountField.val(itemCount);

        // remove unneeded inputs & rename last one
        switch(inputType) {
            case 'text':
                $inputItem.attr('name', 'input');
                $inputItemArea.remove();
                $inputItemFile.remove();
                break;
            case 'textarea':
                $inputItem.remove();
                $inputItemArea.attr('name', 'input');
                $inputItemFile.remove();
                break;
            case 'file':
                $inputItem.remove();
                $inputItemArea.remove();
                $inputItemFile.attr('name', 'input');
                break;
        }

        // swap input type value
        $inputType.val(corpusType);

        // send to server
        $newCorpusForm.submit();
    };
};

},{"../data/corpusTypes.js":9,"../data/nlpApis.js":11}],6:[function(require,module,exports){
module.exports = function HomeController($scope) {
    // corpus model
    $scope.corpus = '0';
    // on corpus select event
    $scope.corpusSelect = function() {
        // do not do anything if it's dummy entry
        if($scope.corpus === '0') {
            return;
        }
        // redirect to corpus
        window.location = '/corpus/' + $scope.corpus;
    };
};

},{}],7:[function(require,module,exports){
module.exports = function ProfileController($scope) {
    //
};

},{}],8:[function(require,module,exports){
module.exports = function RegisterController($scope) {
    //
};

},{}],9:[function(require,module,exports){
// build collection of items
var collection = [];
// rss
collection.push({
    name: 'feed',
    description: 'RSS/RDF/ATOM Feed',
    inputType: 'text',
    inputDescription: 'URL of the RSS/RDF/ATOM feed',
    inputPlaceholder: 'URL of your feed',
    haveItems: true,
    itemsMin: 50,
    itemsMax: 600,
    itemsDefault: 50,
});
// wordpress
collection.push({
    name: 'wordpress',
    description: 'WordPress Blog',
    inputType: 'text',
    inputDescription: 'Weblog URL',
    inputPlaceholder: 'URL of the blog',
    haveItems: true,
    itemsMin: 50,
    itemsMax: 400,
    itemsDefault: 400,
});
// blogger
collection.push({
    name: 'blogger',
    description: 'Blogger Blog',
    inputType: 'text',
    inputDescription: 'Weblog URL',
    inputPlaceholder: 'URL of the blog',
    haveItems: true,
    itemsMin: 50,
    itemsMax: 400,
    itemsDefault: 400,
});
// public twitter
collection.push({
    name: 'twitter',
    description: 'Public Twitter account',
    inputType: 'text',
    inputDescription: 'Twitter username',
    inputPlaceholder: 'Username',
    haveItems: true,
    itemsMin: 200,
    itemsMax: 1500,
    itemsDefault: 1000,
});
// slidewiki
collection.push({
    name: 'slidewiki',
    description: 'SlideWiki Deck',
    inputType: 'text',
    inputDescription: 'Deck ID',
    inputPlaceholder: 'Deck ID',
    haveItems: true,
    itemsMin: 50,
    itemsMax: 1000,
    itemsDefault: 400,
});
// webpage
collection.push({
    name: 'webpage',
    description: 'Web page',
    inputType: 'text',
    inputDescription: 'WebPage URL',
    inputPlaceholder: 'URL',
    haveItems: false,
});
// direct input
collection.push({
    name: 'directinput',
    description: 'Direct input',
    inputType: 'textarea',
    inputDescription: 'Your text/html',
    haveItems: false,
});
// upload a doc
// TODO: implement, then re-enable
collection.push({
    name: 'doc',
    description: 'Upload a document',
    inputType: 'file',
    inputDescription: 'Document',
    haveItems: false,
});

// Our module now returns our view
module.exports = collection;

},{}],10:[function(require,module,exports){
var collection = [];
// overview
collection.push({
    name: 'Overview',
    path: '/overview',
    controller: 'CorpusOverviewController',
    template: '/templates/corpusOverview.html',
    js: require('../controllers/corpus/overview.js'),
});
// facets
collection.push({
    name: 'Facets',
    path: '/facets',
    controller: 'CorpusFacetsController',
    template: '/templates/corpusFacets.html',
    js: require('../controllers/corpus/facets.js'),
});

// Our module now returns our view
module.exports = collection;
},{"../controllers/corpus/facets.js":2,"../controllers/corpus/overview.js":4}],11:[function(require,module,exports){
// build collection of items
var collection = [];
// spotlight
collection.push({
    id: 'DBpedia-Spotlight',
    name: 'DBpedia Spotlight',
});
// fox
collection.push({
    id: 'FOX',
    name: 'FOX',
});

// Our module now returns our view
module.exports = collection;

},{}],12:[function(require,module,exports){
module.exports = function applyDirectives (app) {
};
},{}],13:[function(require,module,exports){
// init app
var app = angular.module('context-app', ['ngRoute', 'mgcrea.ngStrap', 'CorpusModule']);

// load modules
var CorpusModule = require('./modules/corpus');

// config app routes
require('./routes')(app);

// config app services
require('./services')(app);

// init controllers
require('./controllers')(app);

// config app directives
require('./directives')(app);

// config app filters
require('./filters')(app);

},{"./controllers":1,"./directives":12,"./filters":14,"./modules/corpus":16,"./routes":17,"./services":18}],14:[function(require,module,exports){
module.exports = function applyFilters (app) {
};
},{}],15:[function(require,module,exports){
var escapeRegExp = function(str) {
    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
};

var processData = function(data) {
    // articles
    var articles = [];
    // types
    var types = [];
    var typeNames = [];
    // entities
    var entities = [];
    var entityNames = [];

    // extract data
    data.articles.forEach(function(item) {
        // get article data
        var title = '';
        try {
            var dom = $(item.source);
            title = $('extracted-title', dom).text() || dom.text();
        } catch(e) {
            title = item.source;
        }
        title = title.slice(0, 30) + '...';
        var article = {
            id: item._id,
            name: title,
            type: 'article',
            count: 0,
            entities: [],
            types: [],
            source: item.source,
        };

        // get article plain text
        var sourceText = S(item.source).stripTags().s;
        // split plain text and full source into words
        var srcText = sourceText.split(/\s/);
        var src = item.source.split(/\s/);
        // split using additional characters for better processing
        for(var i = 0; i < srcText.length; i++) {
            var it = srcText[i];
            it = it.split('/');
            srcText[i] = it;
        }
        // flatten arrays
        srcText = _.flatten(srcText);

        var findSourceIndex = function(word, cleanWord, entityName, startIndex) {
            startIndex = startIndex || -1;
            // try to get plain match from original source
            var sourceIndex = src.indexOf(word, startIndex);
            // if not found, find by string
            if(sourceIndex === -1) {
                //if(entityName === testEntity) console.log('searching index in array');
                for(var i = 0; i < src.length; i++){
                    var srcWord = src[i];
                    // clean from hrefs
                    var srcWordClean = srcWord.replace(/href="(.+?)"(.*?>?)/, '').replace(/src="(.+?)"(.*?>?)/, '').replace(/alt="(.+?)"(.*?>?)/, '');
                    // skip if containes marking parts
                    if(srcWordClean.indexOf('span%marked%') !== -1) {
                        continue;
                    }

                    // check for match
                    if(srcWordClean.match(new RegExp(matchRegStart+escapeRegExp(cleanWord)+matchReg)) && i >= startIndex) {
                        sourceIndex = i;
                        break;
                    }
                }
            }

            return sourceIndex;
        };

        var cleanReg = /(^[\W]+)|([\W]+$)/g;
        var matchRegStart = '';
        var matchReg = '(\\W?)';

        // get entities
        item.entities.forEach(function(entity){
            var entityParts = entity.name.split(' ');

            // if only one word
            if(entityParts.length === 1) {
                // find word that matches current entity
                srcText.forEach(function(word, index) {
                    // clean word from commas, dots and other suplementary stuff
                    var cleanWord = word.replace(cleanReg, '');
                    var entityClean = entity.name.replace(cleanReg, '');

                    // cehck match
                    if(cleanWord === entity.name || word === entity.name) {
                        // get match from original source
                        var sourceIndex = findSourceIndex(word, cleanWord, entity.name);
                        // if word was found
                        if(sourceIndex !== -1) {
                            var origSrc = src[sourceIndex];
                            var link = origSrc.match(/href="(.+?)"/);
                            var img = origSrc.match(/src="(.+?)"/);
                            var alt = origSrc.match(/alt="(.+?)"/);
                            if(link) {
                                link = link[1];
                                origSrc = origSrc.replace(link, '%link%');
                            }
                            if(img) {
                                img = img[1];
                                origSrc = origSrc.replace(img, '%img%');
                            }
                            if(alt) {
                                alt = alt[1];
                                origSrc = origSrc.replace(alt, '%alt%');
                            }

                            // enrich source
                            src[sourceIndex] = origSrc.replace(
                                entity.name,
                                '<span%marked% class="label label-warning hasTooltip" data-toggle="tooltip" title="' +
                                entity.types.join(' ') + '">' + entity.name + '</span%marked%>'
                            );

                            if(link) {
                                src[sourceIndex] = src[sourceIndex].replace('%link%', link);
                            }
                            if(img) {
                                src[sourceIndex] = src[sourceIndex].replace('%img%', img);
                            }
                            if(alt) {
                                src[sourceIndex] = src[sourceIndex].replace('%alt%', alt);
                            }
                        }

                        return;
                    }
                });
            } else {
                // check match
                var firstWord = entityParts[0];
                var lastWord = entityParts[entityParts.length-1];
                // find word that matches current entity
                srcText.forEach(function(word, index) {
                    // clean word from commas, dots and other suplementary stuff
                    var cleanWord = word.replace(cleanReg, '');
                    if(cleanWord.indexOf('span%marked%') !== -1) {
                        return;
                    }
                    // test match
                    var match = firstWord.match(new RegExp(matchRegStart+escapeRegExp(cleanWord)+matchReg)) !== null;
                    if(match) {
                        var i = 0;
                        for(i = 1; i < entityParts.length; i++) {
                            if(index+i >= srcText.length) {
                                continue;
                            }

                            var nextCleanWord = srcText[index+i].replace(cleanReg, '');
                            if(nextCleanWord.indexOf('span%marked%') !== -1) {
                                continue;
                            }
                            match = match && entityParts[i].match(new RegExp(matchRegStart+escapeRegExp(nextCleanWord)+matchReg)) !== null;
                        }

                        // check complete match
                        if(match) {
                            // Replace first part
                            // get match from original source
                            var sourceStartIndex = findSourceIndex(word, cleanWord, firstWord, index);

                            // Replace end part
                            var endIndex = index+entityParts.length-1;
                            if(endIndex >= srcText.length) {
                                return;
                            }
                            var endWord = srcText[endIndex];
                            var endCleanWord = endWord.replace(/[^\w]/, '');
                            // try to get plain match from original source for start
                            var sourceEndIndex = findSourceIndex(endWord, endCleanWord, lastWord, endIndex);

                            // if word was found
                            if(sourceStartIndex !== -1 && sourceEndIndex !== -1 && Math.abs(sourceStartIndex - sourceEndIndex) < 5) {
                                // enrich source
                                src[sourceStartIndex] = src[sourceStartIndex].replace(
                                    new RegExp(escapeRegExp(firstWord)+'$'),
                                    '<span%marked% class="label label-warning hasTooltip" data-toggle="tooltip" title="' +
                                    entity.types.join(' ') + '">' + firstWord
                                );

                                // enrich source
                                src[sourceEndIndex] = src[sourceEndIndex].replace(lastWord, lastWord + '</span%marked%>');
                            }
                        }
                        return;
                    }
                });
            }

            // get entity data
            var ind = entityNames.indexOf(entity.name);
            var newEntity;
            if(ind !== -1) {
                newEntity = entities[ind];
                entities[ind].count += 1;
                if(entities[ind].articles.indexOf(article.id) === -1) {
                    entities[ind].articles.push(article.id);
                }
                if(article.entities.indexOf(newEntity.id) === -1) {
                    article.entities.push(newEntity.id);
                }
            } else {
                newEntity = {
                    id: entity._id,
                    name: entity.name,
                    type: 'entity',
                    count: 1,
                    articles: [article.id],
                    types: []
                };
                article.entities.push(newEntity.id);
            }

            // get types
            entity.types.forEach(function(type){
                // get type data
                var name = type.split(':')[1];
                var tid = 'type_'+name;
                var ind = typeNames.indexOf(name);
                if(ind !== -1) {
                    types[ind].count += 1;
                    types[ind].entities.push(newEntity.id);
                    types[ind].articles.push(article.id);
                    if(newEntity.types.indexOf(tid) === -1) {
                        newEntity.types.push(tid);
                    }
                    if(article.types.indexOf(tid) === -1) {
                        article.types.push(tid);
                    }
                } else {
                    types.push({
                        id: tid,
                        name: name,
                        type: 'type',
                        count: 1,
                        entities: [newEntity.id],
                        articles: [article.id],
                    });
                    if(newEntity.types.indexOf(tid) === -1) {
                        newEntity.types.push('type_'+name);
                    }
                    if(article.types.indexOf(tid) === -1) {
                        article.types.push('type_'+name);
                    }
                    typeNames.push(name);
                }
            });

            if(ind === -1) {
                entities.push(newEntity);
                entityNames.push(newEntity.name);
            }
        });

        // join source back
        item.source = src.join(' ').replace(/span%marked%/g, 'span');
        article.source = item.source;

        // push to array
        articles.push(article);
    });

    // sort arrays by count
    var sortFunction = function(a, b) {
        return b.count - a.count;
    };
    entities = entities.sort(sortFunction);
    types = types.sort(sortFunction);

    return {
        articles: articles,
        types: types,
        entities: entities
    };
};

// expose
exports.processData = processData;

},{}],16:[function(require,module,exports){
// get extentions
var extentions = require('../data/corpusextentions');

// init module
var corpusModule = angular.module('CorpusModule', ['ui.router']);

// config routes
corpusModule.config(function ($stateProvider, $urlRouterProvider) {
    // main view
    $stateProvider.state('corpus', {
        url: '/corpus/:id',
        controller: require('../controllers/corpus/main'),
        templateUrl: '/templates/corpusView.html',
        resolve: {
            corpus: ['$http', '$stateParams', function($http, $stateParams) {
                return $http({method: 'GET', url: '/api/corpus/' + $stateParams.id});
            }]
        }
    });

    // make view routes for extentions
    extentions.forEach(function(ex) {
        $stateProvider.state('corpus.' + ex.name, {
            url: ex.path,
            templateUrl: ex.template,
            controller: ex.controller,
        });
    });
});

// register controllers
extentions.forEach(function(ex) {
    corpusModule.controller(ex.controller, ['$scope', '$state', '$sce', ex.js]);
});

// export
module.exports = corpusModule;

},{"../controllers/corpus/main":3,"../data/corpusextentions":10}],17:[function(require,module,exports){
module.exports = function applyRoutes (app) {
    app.config(['$routeProvider', '$locationProvider', function($routeProvider, $locationProvider) {
        $routeProvider.when('/', { controller: 'HomeController', template: '' });
        $routeProvider.when('/auth', { controller: 'LoginController', template: '' });
        $routeProvider.when('/register', { controller: 'RegisterController', template: '' });
        $routeProvider.when('/createCorpus', { controller: 'CreateCorpusController', templateUrl: '/templates/createCorpus.html' });

        $locationProvider.html5Mode(true);
    }]);
};
},{}],18:[function(require,module,exports){
module.exports = function applyServices (app) {
};

},{}]},{},[13])
//# sourceMappingURL=data:application/json;base64,
